[{"doctype":"documentation","id":"references/FeatureRegistries._showentry","title":"_showentry","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.matchesentry","title":"matchesentry","text":""},{"doctype":"document","id":"documents/docs/tutorials/introduction.md","title":"Introduction","text":"Introduction"},{"doctype":"documentation","id":"references/FeatureRegistries.Registry","title":"Registry","text":"Create a feature registry with columns of  Field s Keyword arguments name::String  A descriptive name fields::NamedTuple  description::String    Description text for the registry Shown when  info(registry is called loadfn  identity  Function to apply over a row when  load  is called For example calling  load(registry[\"id  will call  loadfn "},{"doctype":"documentation","id":"references/FeatureRegistries.load","title":"load","text":"Load a feature represented by a registry entry The behavior depends on the  Registry "},{"doctype":"documentation","id":"references/FeatureRegistries.IMAGE_MIMES","title":"IMAGE_MIMES","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.##InlineTest-01b48f5c342f65df7fcd07f28f0d2cacbb09f0a0.__init__","title":"__init__","text":""},{"doctype":"documentation","id":"references/FeatureRegistries","title":"FeatureRegistries","text":"FeatureRegistries.jl is a Julia package to create registries of a package’s features letting package users discover and use them more easily FeatureRegistries.jl lets you create tables that list package features so that users can explore and discover features users can search features through a consistent interface and developers of third-party packages can transparently add functionality Usage Package users Package users of packages can use registries through find  filter  findfirst  to subset the list of features based on filters info registry  to get more information on a specific registry registry[id  to inspect an entry in a registry load registry  to access a feature See also  how to use registries  Package developers Developers can create registries using  Registry  and  Field   push!(registry "},{"doctype":"documentation","id":"references/FeatureRegistries.registrytable","title":"registrytable","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.RequiredKeyMissingError","title":"RequiredKeyMissingError","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.RegistryInfo","title":"RegistryInfo","text":""},{"doctype":"documentation","id":"references/FeatureRegistries._title","title":"_title","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.RichCell","title":"RichCell","text":""},{"doctype":"document","id":"documents/docs/examples/testimages.md","title":"Example: images in TestImages.jl","text":"ImageShow TestImages images id String name description image Any name name loadfn row row image id TestImages remotefiles image TestImages testimage id isnothing image prod size image push! images id image images ImageInTerminal show images Example images in TestImages  jl TestImages  jl  collects images commonly used for testing computer vision algorithms With little code we can create a registry that displays nicely When outside an environment that supports HTML output like a terminal the registry will be displayed as below"},{"doctype":"documentation","id":"references/FeatureRegistries.info","title":"info","text":"registry registry Show information about a registry specifically its name description and fields Examples"},{"doctype":"documentation","id":"references/FeatureRegistries.##InlineTest-01b48f5c342f65df7fcd07f28f0d2cacbb09f0a0.tests","title":"tests","text":""},{"doctype":"documentation","id":"references/FeatureRegistries._stringhtml","title":"_stringhtml","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.DuplicateIDError","title":"DuplicateIDError","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.##InlineTest-01b48f5c342f65df7fcd07f28f0d2cacbb09f0a0.TESTSET_MACROS","title":"TESTSET_MACROS","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.RegistryEntry","title":"RegistryEntry","text":"An entry in a feature registry  registry  with values  row  Returned when indexing into a  FeatureRegistry  i.e registry[id "},{"doctype":"documentation","id":"references/FeatureRegistries.find","title":"find","text":"Find entries in a registry that match a set of filters given as keyword arguments The keyword name must correspond to a field in  registry  while the value is a filter that is checked against each field value See  how to use registries  for examples"},{"doctype":"documentation","id":"references/FeatureRegistries._show_image_html","title":"_show_image_html","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.runtests","title":"runtests","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.getdata","title":"getdata","text":""},{"doctype":"documentation","id":"references/FeatureRegistries._index_key","title":"_index_key","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.withdata","title":"withdata","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.getfields","title":"getfields","text":""},{"doctype":"document","id":"documents/docs/using.md","title":"Using registries","text":"registry registry entry registry entry id entry category entry instance fn entry fn ℯ registry category trigonometric registry id registry id id length id Using registries This page gives an overview of how to use registries to list and search for features A feature registry is a  Registry  object that a package makes available to its users so that they can discover the package’s features Let’s look at an example registry Each entry in a field consists of multiple fields one of which is a unique ID We can get more information on a registry’s fields using  info  We can see that the  id  column gives each entry’s unique ID Loading features We can index into the registry with a valid ID to get a  RegistryEntry  Each of the fields can be accessed using property syntax For every kind of feature there should be a canonical way to load that functionality for usage For example in a registry of datasets loading an entry could mean downloading and unpacking the data to return a local file path Different registries will have different loading behavior which can be invoked by calling  load  on an entry In the above toy example after finding a suitable function we want to call it so  load  returns the Julia object Searching for features A large registry with many entries and columns can quickly become unwieldy when searching for features Using  find  or  filter  we can quickly subset the features based on a registry’s fields We can match fields against exact values And some types like  String  accept additional filters like a  Regex  We can always filter based on an arbitrary predicate"},{"doctype":"documentation","id":"references/FeatureRegistries.Field","title":"Field","text":"A field defines what data will be stored in one column of a  Registry  Keyword arguments description::String    More information on the field contents and how they can be used May contain Markdown formatting optional  false  Whether a registry entry can be entered without alue in this field default  missing  The default value used if  optional  true  If a non missing  value is passed the value of  optional  is ignored and the field is treated as optional defaultfn  row key  default  Function to compute dynamically compute a default value from an entry If passed the value of  default  is ignored Examples A simple  Field  with entries of type  String "},{"doctype":"document","id":"documents/README.md","title":"FeatureRegistries.jl","text":"FeatureRegistries  jl Documentation A Julia package to create registries of your own package’s features letting your users discover and use them more easily FeatureRegistries.jl lets you create tables that list package features so that users can explore and discover features users can search features through a consistent interface and developers of third-party packages can transparently add functionality But what are “features” Features can be any group of package functionality with some attributes in common that you want users to be able to discover and use For example a registry could store datasets with metadata and documentation that a user can download machine learning architectures that a user can instantiate or a set of remotely stored images Read on in the  documentation  for more information on  how to use registries  and  examples of such registries "},{"doctype":"document","id":"documents/docs/examples/colors.md","title":"Example: Named colors in Colors.jl","text":"Colors FixedPointNumbers colors name String name description color Color name description name id name name sort collect keys Colors color_names val Colors color_names name push! colors name name color RGB N0f8 val colors colors colors show colors Example Named colors in Colors  jl Colors  jl  is a package that provdides not just color types but also a set of named colors Here we create a  Registry  that lists all the named colors in Colors.jl We can select a single entry using its ID And get a summary of fields in the registry When in an environment that does not support HTML output registries will be printed to the terminal"},{"doctype":"documentation","id":"references/FeatureRegistries.exampleregistry","title":"exampleregistry","text":"registry Create a  Registry  of mathematical functions for testing purposes Examples"},{"doctype":"document","id":"documents/docs/examples.md","title":"Examples","text":"Examples This page lists some example registries that list features from third-party packages TestImages  jl Colors  jl"},{"doctype":"documentation","id":"references/FeatureRegistries._fieldtype","title":"_fieldtype","text":""},{"doctype":"documentation","id":"references/FeatureRegistries.makerow","title":"makerow","text":""}]